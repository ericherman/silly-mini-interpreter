
ALL ASSUMES LITTLE ENDIAN. Other considerations later.
(Function to interpret little endian input bytecode in endian-neutral fashion is written but unused.)
All valid programs are terminated with an exit opcode

Bytecode, 1 byte per command
Data and indexing as signed 32bit integers only
Configurable but static amount of memory in form of a number of integers (static: allocated on program start).
Memory 0 initialized?

All programs start out with unsigned 32 bit memory size

DST/SRC: indexes into memory array, 0 indexed

1: addconst DSTPTR, DATA (add constant DATA to *DSTPTR)
2: addrel DSTPTR, SRCPTR (add *SRCPTR to *DSTPTR)
3: subconst DSTPTR, DATA (subtract constant DATA to *DSTPTR)
4: subrel DSTPTR, SRCPTR (subtract *SRCPTR to *DSTPTR)
5: movconst
6: movrel
7: jump POS (unconditional jump)
8: jumpz POS, CONDPTR (jump if memory is 0 at CONDPTR)
# TODO indirect jumps
9: print SRCPTR (print *SRCPTR to STDOUT + newline)
10: exit (end program execution)

